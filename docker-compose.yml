version: '3'

# Networks
networks:
  demo-network:
    driver: bridge

# Services
services:
# web service
  web:
# При первом запуске делаем настройку Certbot от Let’s Encrypt для https подключения.
# 1. docker container exec -it web /bin/bash
# 2. apt-get update && openssl dhparam -out /etc/ssl/certs/dhparam.pem 512 && apt-get install certbot -y && apt-get install python-certbot-nginx -y && certbot --nginx -d mpkelevra23.ru && nginx -t
    image: library/nginx:1.19
    container_name: web
    ports:
      - 80:80
      - 443:443
    restart: unless-stopped
    tty: true
    volumes:
      - ../:/var/www/demo:rw
      - ./.docker/nginx/.htpasswd:/etc/nginx/.htpasswd:ro
#      - ./.docker/nginx/conf.d/nginx.conf:/etc/nginx/nginx.conf:rw
#      - ./.docker/nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf:rw
      - ./.docker/nginx/conf.d/demo.conf:/etc/nginx/conf.d/demo.conf:rw
    depends_on:
      - php-fpm
    networks:
      - demo-network
# PHP-FPM service
# При первой настройке обновляем composer.
# 1. docker container exec -it php-fpm /bin/bash
# 2. composer self-update && composer update && composer cc && composer validate
  php-fpm:
    build: .docker/php/
    container_name: php-fpm
    working_dir: /var/www/demo/app
    restart: unless-stopped
    tty: true
    volumes:
      - ./:/var/www/demo/app
    depends_on:
      - db
    networks:
      - demo-network
# db service
# При первой настройке восстанавливаем данные в базу.
# 1. docker container exec -it db /bin/bash
# 2. psql -h db -U admin -d demo < /dump/dump_24_11_2020.sql
  db:
    image: library/postgres:13
    container_name: db
    restart: unless-stopped
    tty: true
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: pN8bPJJ2Uhbf5zRw
      POSTGRES_DB: demo
    ports:
      - 2345:5432
    volumes:
      - ./.docker/postgres/data:/var/lib/postgresql/data:rw
      - ./.docker/postgres/dump:/dump:rw
    networks:
      - demo-network